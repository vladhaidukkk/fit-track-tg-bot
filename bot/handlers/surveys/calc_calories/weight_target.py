from aiogram import F
from aiogram.types import CallbackQuery, Message
from aiogram.utils import markdown as md

from bot.core.nutrition_calculator import calc_nutritional_profile
from bot.keyboards.inline.activity_rate import activity_rate_keyboard
from bot.keyboards.inline.biological_gender import BIOLOGICAL_GENDER_TO_TEXT
from bot.keyboards.inline.weight_target import WEIGHT_TARGET_TO_DATA, WEIGHT_TARGET_TO_TEXT
from bot.keyboards.reply.root import root_keyboard
from bot.keyboards.reply.survey import SurveyKeyboardText
from bot.survey.context import SurveyContext
from bot.survey.routers import SurveyStateRouter
from bot.utils.dict_utils import get_key_by_value
from bot.utils.format_utils import format_age, format_number, format_numbers_range
from bot.utils.message_utils import build_detailed_message
from bot.utils.string_utils import get_tail

from .prompts import AMR_PROMPT
from .states import CalcCaloriesStates

state_router = SurveyStateRouter(CalcCaloriesStates.weight_target)


@state_router.callback_query(F.data.in_(WEIGHT_TARGET_TO_DATA.values()))
async def weight_target_handler(callback_query: CallbackQuery, survey: SurveyContext) -> None:
    await survey.clear_messages(
        bot=callback_query.bot,
        chat_id=callback_query.message.chat.id,
        exclude_message_ids=[callback_query.message.message_id],
        subset=slice(1, None),
    )

    weight_target = get_key_by_value(WEIGHT_TARGET_TO_DATA, callback_query.data)
    await survey.state.update_data(weight_target=weight_target)
    data = await survey.state.get_data()
    await survey.state.clear()

    await callback_query.answer()
    await callback_query.message.edit_text(
        build_detailed_message(
            title="üìã –í—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏",
            details=[
                ("–ë—ñ–æ–ª–æ–≥—ñ—á–Ω–∞ —Å—Ç–∞—Ç—å", get_tail(BIOLOGICAL_GENDER_TO_TEXT[data["biological_gender"]])),
                ("–í—ñ–∫", format_age(data["age"])),
                ("–†—ñ—Å—Ç", format_number(data["height"], "—Å–º")),
                ("–í–∞–≥–∞", format_number(data["weight"], "–∫–≥")),
                ("–í—ñ–¥—Å–æ—Ç–æ–∫ –∂–∏—Ä—É", format_number(data["fat_pct"], "%", sep="")),
                ("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", format_number(data["amr"].value, precision=3)),
            ],
            footer=(
                "üéØ –ù–∏–∂—á–µ –≤–∏ –±–∞—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –ø–æ–∂–∏–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ —â–æ–± "
                + md.hbold(get_tail(WEIGHT_TARGET_TO_TEXT[data["weight_target"]]).upper())
                + ", —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö."
            ),
            bold_detail_name=False,
            bold_detail_value=True,
        )
    )

    nutritional_profile = calc_nutritional_profile(
        gender=data["biological_gender"],
        age=data["age"],
        height=data["height"],
        weight=data["weight"],
        fat_pct=data["fat_pct"],
        amr=data["amr"],
        target=data["weight_target"],
    )
    min_calories, max_calories = nutritional_profile["calories"]
    min_carbohydrates, max_carbohydrates = nutritional_profile["carbohydrates"]
    min_fiber, max_fiber = nutritional_profile["fiber"]
    norm_sugar, max_sugar = nutritional_profile["sugar"]
    norm_caffeine, max_caffeine = nutritional_profile["caffeine"]

    await callback_query.message.answer(
        build_detailed_message(
            title="üìä –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –ø–æ–∂–∏–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏",
            details=[
                ("–ö–∞–ª–æ—Ä—ñ—ó", format_numbers_range(min_calories, max_calories, "–∫–∫–∞–ª", precision=0)),
                ("–ë—ñ–ª–∫–∏", format_number(nutritional_profile["proteins"], "–≥", precision=0)),
                ("–ñ–∏—Ä–∏", format_number(nutritional_profile["fats"], "–≥", precision=0)),
                ("–í—É–≥–ª–µ–≤–æ–¥–∏", format_numbers_range(min_carbohydrates, max_carbohydrates, "–≥", precision=0)),
                ("–í–æ–¥–∞", format_number(nutritional_profile["water"], "–ª", precision=2)),
                ("–ö–ª—ñ—Ç–∫–æ–≤–∏–Ω–∞", format_numbers_range(min_fiber, max_fiber, "–≥")),
                ("–¶—É–∫–æ—Ä", format_numbers_range(norm_sugar, max_sugar, "–≥")),
                ("–°—ñ–ª—å", format_number(nutritional_profile["salt"], "–≥")),
                ("–ö–æ—Ñ–µ—ó–Ω", format_numbers_range(norm_caffeine, max_caffeine, "–º–≥", precision=0)),
            ],
            footer=(
                md.hbold("‚ö†Ô∏è –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É: ")
                + "—Ü—ñ –¥–∞–Ω—ñ –Ω–µ —î –¥–æ—Å—Ç–æ–≤—ñ—Ä–Ω–æ —Ç–æ—á–Ω–∏–º–∏, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –∑–∞–ª–µ–∂–∞—Ç—å –≤—ñ–¥ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç–µ–π –≤–∞—à–æ–≥–æ "
                + "–æ—Ä–≥–∞–Ω—ñ–∑–º—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —ó—Ö —è–∫ –≤—ñ–¥–ø—Ä–∞–≤–Ω—É —Ç–æ—á–∫—É —Ç–∞ –∫–æ—Ä–∏–≥—É–π—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤."
            ),
            bold_detail_name=False,
            bold_detail_value=True,
        ),
        reply_markup=root_keyboard(user_id=callback_query.from_user.id),
    )
    # TODO: add a button to show detailed info (lbm, bmr, tef...).


@state_router.message(F.text == SurveyKeyboardText.PREV_STEP)
async def prev_step_weight_target_handler(message: Message, survey: SurveyContext) -> None:
    await survey.go_to_prev_step(
        bot=message.bot,
        chat_id=message.chat.id,
        prev_state=CalcCaloriesStates.amr,
        clear_prev_state_messages=True,
    )

    sent_message = await message.answer(AMR_PROMPT, reply_markup=activity_rate_keyboard(show_help=True))
    await survey.add_messages_to_delete(sent_message.message_id)


@state_router.message()
async def unknown_weight_target_handler(message: Message, survey: SurveyContext) -> None:
    sent_message = await message.answer("‚ö†Ô∏è –û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –º–µ—Ç—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")
    await survey.add_messages_to_delete(sent_message.message_id)
