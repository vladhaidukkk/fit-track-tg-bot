from aiogram import F
from aiogram.types import CallbackQuery, Message

from bot.core.enums import ActivityRate
from bot.keyboards.inline.activity_rate import (
    ACTIVITY_RATE_AI_HELP_DATA,
    ACTIVITY_RATE_HELP_DATA,
    ACTIVITY_RATE_TO_DATA,
    activity_rate_keyboard,
)
from bot.keyboards.inline.biological_gender import BIOLOGICAL_GENDER_TO_TEXT
from bot.keyboards.inline.fat_pct import fat_pct_keyboard
from bot.keyboards.inline.weight_target import weight_target_keyboard
from bot.keyboards.reply.survey import SurveyKeyboardText
from bot.survey.context import SurveyContext
from bot.survey.routers import SurveyStateRouter
from bot.utils.dict_utils import get_key_by_value
from bot.utils.format_utils import format_age, format_number
from bot.utils.message_utils import build_detailed_message
from bot.utils.string_utils import get_tail

from .prompts import AMR_AI_QUERY_PROMPT, FAT_PCT_PROMPT, WEIGHT_TARGET_PROMPT
from .states import CalcCaloriesStates

state_router = SurveyStateRouter(CalcCaloriesStates.amr)


@state_router.callback_query(F.data.in_(ACTIVITY_RATE_TO_DATA.values()))
async def amr_handler(callback_query: CallbackQuery, survey: SurveyContext) -> None:
    await survey.add_messages_to_delete(callback_query.message.message_id)
    await survey.clear_messages(bot=callback_query.bot, chat_id=callback_query.message.chat.id, subset=slice(2, None))

    amr = get_key_by_value(ACTIVITY_RATE_TO_DATA, callback_query.data)
    await survey.state.update_data(amr=amr)
    data = await survey.state.get_data()
    await survey.state.set_state(CalcCaloriesStates.weight_target)

    sent_message = await callback_query.message.answer(
        build_detailed_message(
            title="üìã –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ",
            details=[
                ("–ë—ñ–æ–ª–æ–≥—ñ—á–Ω–∞ —Å—Ç–∞—Ç—å", get_tail(BIOLOGICAL_GENDER_TO_TEXT[data["biological_gender"]])),
                ("–í—ñ–∫", format_age(data["age"])),
                ("–†—ñ—Å—Ç", format_number(data["height"], "—Å–º")),
                ("–í–∞–≥–∞", format_number(data["weight"], "–∫–≥")),
                ("–í—ñ–¥—Å–æ—Ç–æ–∫ –∂–∏—Ä—É", format_number(data["fat_pct"], "%", sep="")),
                ("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", format_number(data["amr"].value, precision=3)),
            ],
            footer=WEIGHT_TARGET_PROMPT,
            bold_detail_name=False,
            bold_detail_value=True,
        ),
        reply_markup=weight_target_keyboard(),
    )
    await survey.add_messages_to_delete(sent_message.message_id)


@state_router.callback_query(F.data == ACTIVITY_RATE_HELP_DATA)
async def amr_help_handler(callback_query: CallbackQuery) -> None:
    await callback_query.answer()
    await callback_query.message.edit_text(
        build_detailed_message(
            title="‚ÑπÔ∏è –í–∏–¥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ —ó—Ö –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏",
            details=[
                (
                    f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (AMR: {ActivityRate.SEDENTARY.value})",
                    "—Å–∏–¥—è—á–∏–π —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è, –º–∞–π–∂–µ –≤—ñ–¥—Å—É—Ç–Ω—è —Ñ—ñ–∑–∏—á–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å, –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å",
                ),
                (
                    f"–õ–µ–≥–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (AMR: {ActivityRate.LIGHTLY_ACTIVE.value})",
                    "–º–∞–ª–æ—Ä—É—Ö–ª–∏–≤–∏–π —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è, –ª–µ–≥–∫—ñ —Ñ—ñ–∑–∏—á–Ω—ñ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è 1-3 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å",
                ),
                (
                    f"–°–µ—Ä–µ–¥–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (AMR: {ActivityRate.MODERATELY_ACTIVE.value})",
                    "–∞–∫—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è, —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è 3-5 —Ä–∞–∑—ñ–≤ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å",
                ),
                (
                    f"–í–∏—Å–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (AMR: {ActivityRate.VERY_ACTIVE.value})",
                    "—â–æ–¥–µ–Ω–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ñ –∑–∞–Ω—è—Ç—Ç—è, –≤–∞–∂–∫–∞ —Ñ—ñ–∑–∏—á–Ω–∞ —Ä–æ–±–æ—Ç–∞",
                ),
                (
                    f"–î—É–∂–µ –≤–∏—Å–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (AMR: {ActivityRate.EXTRA_ACTIVE.value})",
                    "—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–≤—ñ—á—ñ –Ω–∞ –¥–µ–Ω—å, –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Å–ø–æ—Ä—Ç, –¥—É–∂–µ –≤–∞–∂–∫–∞ —Ñ—ñ–∑–∏—á–Ω–∞ –ø—Ä–∞—Ü—è",
                ),
            ],
            footer="üèÉ –û–±–µ—Ä—ñ—Ç—å –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ, —â–æ –Ω–∞–π–±—ñ–ª—å—à–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∞—à–æ–º—É —Å–ø–æ—Å–æ–±—É –∂–∏—Ç—Ç—è, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É.",
            numerate_details=True,
            details_sep="\n\n",
            italic_footer=False,
        ),
        reply_markup=activity_rate_keyboard(show_ai_help=True),
    )


@state_router.callback_query(F.data == ACTIVITY_RATE_AI_HELP_DATA)
async def amr_ai_help_handler(callback_query: CallbackQuery, survey: SurveyContext) -> None:
    await survey.state.set_state(CalcCaloriesStates.amr_ai_query)

    await callback_query.answer()
    await callback_query.message.edit_reply_markup(reply_markup=activity_rate_keyboard())
    sent_message = await callback_query.message.answer(AMR_AI_QUERY_PROMPT)
    await survey.add_messages_to_delete(sent_message.message_id)


@state_router.message(F.text == SurveyKeyboardText.PREV_STEP)
async def prev_step_amr_handler(message: Message, survey: SurveyContext) -> None:
    await survey.add_messages_to_delete(message.message_id)
    await survey.go_to_prev_step(
        bot=message.bot,
        chat_id=message.chat.id,
        prev_state=CalcCaloriesStates.fat_pct,
        clear_prev_state_messages=True,
    )

    sent_message = await message.answer(FAT_PCT_PROMPT, reply_markup=fat_pct_keyboard())
    await survey.add_messages_to_delete(sent_message.message_id)


@state_router.message()
async def unknown_amr_handler(message: Message, survey: SurveyContext) -> None:
    sent_message = await message.answer("‚ö†Ô∏è –û–±–µ—Ä—ñ—Ç—å –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")
    await survey.add_messages_to_delete(message.message_id, sent_message.message_id)
