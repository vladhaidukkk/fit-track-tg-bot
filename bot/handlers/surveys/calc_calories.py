from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from aiogram.utils import markdown as md

from bot.core.nutrition_calculator import calc_nutritional_profile
from bot.keyboards.biological_gender import (
    BIOLOGICAL_GENDER_TO_DATA,
    BIOLOGICAL_GENDER_TO_TEXT,
    biological_gender_keyboard,
)
from bot.keyboards.root import RootKeyboardText
from bot.keyboards.weight_target import WEIGHT_TARGET_TO_DATA, WEIGHT_TARGET_TO_TEXT, weight_target_keyboard
from bot.utils.dict_utils import get_key_by_value

router = Router(name=__name__)


class CalcCaloriesSurvey(StatesGroup):
    biological_gender = State()
    age = State()
    height = State()
    weight = State()
    fat_pct = State()
    amr = State()
    weight_target = State()


@router.message(F.text == RootKeyboardText.CALC_CALORIES)
async def calc_calories_button_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(CalcCaloriesSurvey.biological_gender)
    await message.answer(
        "üöª –û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –±—ñ–æ–ª–æ–≥—ñ—á–Ω—É —Å—Ç–∞—Ç—å, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É.", reply_markup=biological_gender_keyboard()
    )


@router.callback_query(CalcCaloriesSurvey.biological_gender, F.data.in_(BIOLOGICAL_GENDER_TO_DATA.values()))
async def calc_calories_survey_biological_gender_handler(callback_query: CallbackQuery, state: FSMContext) -> None:
    biological_gender = get_key_by_value(BIOLOGICAL_GENDER_TO_DATA, callback_query.data)
    await state.update_data(biological_gender=biological_gender)
    await state.set_state(CalcCaloriesSurvey.age)

    await callback_query.answer()
    icon, output = BIOLOGICAL_GENDER_TO_TEXT[biological_gender].split(maxsplit=1)
    await callback_query.message.edit_text(f"{icon} –í–∞—à–∞ –±—ñ–æ–ª–æ–≥—ñ—á–Ω–∞ —Å—Ç–∞—Ç—å: {md.hbold(output)}")
    await callback_query.message.answer("üìÖ –í–∫–∞–∂—ñ—Ç—å –≤–∞—à –≤—ñ–∫:")


@router.message(CalcCaloriesSurvey.biological_gender)
async def calc_calories_survey_unknown_biological_gender_handler(message: Message) -> None:
    await message.answer("‚ö†Ô∏è –û–±–µ—Ä—ñ—Ç—å –±—ñ–æ–ª–æ–≥—ñ—á–Ω—É —Å—Ç–∞—Ç—å, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")


@router.message(CalcCaloriesSurvey.age, F.text.regexp(r"^\d+$"))
async def calc_calories_survey_age_handler(message: Message, state: FSMContext) -> None:
    age = int(message.text)
    await state.update_data(age=age)
    await state.set_state(CalcCaloriesSurvey.height)
    await message.answer("üìè –í–∫–∞–∂—ñ—Ç—å –≤–∞—à –∑—Ä—ñ—Å—Ç (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):")


@router.message(CalcCaloriesSurvey.age, ~F.text.regexp(r"^\d+$"))
async def calc_calories_survey_invalid_age_handler(message: Message) -> None:
    await message.answer("‚ö†Ô∏è –í—ñ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —â–µ —Ä–∞–∑:")


@router.message(CalcCaloriesSurvey.height, F.text.regexp(r"^\d+(\.\d+)?$"))
async def calc_calories_survey_height_handler(message: Message, state: FSMContext) -> None:
    height = float(message.text)
    await state.update_data(height=height)
    await state.set_state(CalcCaloriesSurvey.weight)
    await message.answer("‚öñÔ∏è –í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É (–≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö):")


@router.message(CalcCaloriesSurvey.height, ~F.text.regexp(r"^\d+(\.\d+)?$"))
async def calc_calories_survey_invalid_height_handler(message: Message) -> None:
    await message.answer("‚ö†Ô∏è –ó—Ä—ñ—Å—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —â–µ —Ä–∞–∑:")


@router.message(CalcCaloriesSurvey.weight, F.text.regexp(r"^\d+(\.\d+)?$"))
async def calc_calories_survey_weight_handler(message: Message, state: FSMContext) -> None:
    weight = float(message.text)
    await state.update_data(weight=weight)
    await state.set_state(CalcCaloriesSurvey.fat_pct)
    await message.answer("üìä –í–∫–∞–∂—ñ—Ç—å –≤–∞—à –≤—ñ–¥—Å–æ—Ç–æ–∫ –∂–∏—Ä—É:")


@router.message(CalcCaloriesSurvey.weight, ~F.text.regexp(r"^\d+(\.\d+)?$"))
async def calc_calories_survey_invalid_weight_handler(message: Message) -> None:
    await message.answer("‚ö†Ô∏è –í–∞–≥–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å —ó—ó —â–µ —Ä–∞–∑:")


@router.message(CalcCaloriesSurvey.fat_pct, F.text.regexp(r"^\d+$"))
async def calc_calories_survey_fat_pct_handler(message: Message, state: FSMContext) -> None:
    fat_pct = int(message.text)
    await state.update_data(fat_pct=fat_pct)
    await state.set_state(CalcCaloriesSurvey.amr)
    await message.answer("üèÉ –í–∫–∞–∂—ñ—Ç—å –≤–∞—à –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:")


@router.message(CalcCaloriesSurvey.fat_pct, ~F.text.regexp(r"^\d+$"))
async def calc_calories_survey_invalid_fat_pct_handler(message: Message) -> None:
    await message.answer("‚ö†Ô∏è –í—ñ–¥—Å–æ—Ç–æ–∫ –∂–∏—Ä—É –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —â–µ —Ä–∞–∑:")


@router.message(CalcCaloriesSurvey.amr, F.text.regexp(r"^\d+(\.\d+)?$"))
async def calc_calories_survey_amr_handler(message: Message, state: FSMContext) -> None:
    amr = float(message.text)
    await state.update_data(amr=amr)
    data = await state.get_data()
    await state.set_state(CalcCaloriesSurvey.weight_target)

    _biological_gender_icon, biological_gender_output = BIOLOGICAL_GENDER_TO_TEXT[data["biological_gender"]].split(
        maxsplit=1
    )
    age = data["age"]
    if age % 10 == 1 and age % 100 != 11:
        age_word = "—Ä—ñ–∫"
    elif 2 <= age % 10 <= 4 and not (12 <= age % 100 <= 14):
        age_word = "—Ä–æ–∫–∏"
    else:
        age_word = "—Ä–æ–∫—ñ–≤"
    await message.answer(
        md.text(
            f"–ë—ñ–æ–ª–æ–≥—ñ—á–Ω–∞ —Å—Ç–∞—Ç—å: {md.hbold(biological_gender_output)}",
            f"–í—ñ–∫: {md.hbold(f"{data["age"]} {age_word}")}",
            f"–†—ñ—Å—Ç: {md.hbold(f"{data["height"]} —Å–º")}",
            f"–í–∞–≥–∞: {md.hbold(f"{data["weight"]} –∫–≥")}",
            f"–í—ñ–¥—Å–æ—Ç–æ–∫ –∂–∏—Ä—É: {md.hbold(f"{data["fat_pct"]}%")}",
            f"–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {md.hbold(data["amr"])}",
            sep="\n",
        )
    )
    await message.answer(
        (
            "üéØ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—Å—ñ –¥–∞–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ, —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –º–µ—Ç—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É. "
            "–¢–æ–¥—ñ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ–∂–∏–≤–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–æ—ó –º–µ—Ç–∏."
        ),
        reply_markup=weight_target_keyboard(),
    )


@router.message(CalcCaloriesSurvey.amr, ~F.text.regexp(r"^\d+(\.\d+)?$"))
async def calc_calories_survey_invalid_amr_handler(message: Message) -> None:
    await message.answer("‚ö†Ô∏è –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —â–µ —Ä–∞–∑:")


@router.callback_query(CalcCaloriesSurvey.weight_target, F.data.in_(WEIGHT_TARGET_TO_DATA.values()))
async def calc_calories_survey_weight_target_handler(callback_query: CallbackQuery, state: FSMContext) -> None:
    weight_target = get_key_by_value(WEIGHT_TARGET_TO_DATA, callback_query.data)
    await state.update_data(weight_target=weight_target)
    data = await state.get_data()
    await state.clear()

    await callback_query.answer()
    _icon, output = WEIGHT_TARGET_TO_TEXT[weight_target].split(maxsplit=1)
    await callback_query.message.edit_text(f"üéØ –í–∞—à–∞ –º–µ—Ç–∞: {md.hbold(output)}")

    nutritional_profile = calc_nutritional_profile(
        gender=data["biological_gender"],
        age=data["age"],
        height=data["height"],
        weight=data["weight"],
        fat_pct=data["fat_pct"],
        amr=data["amr"],
        target=data["weight_target"],
    )
    await callback_query.message.answer(
        md.text("üçΩÔ∏è –í–∞—à–∞ –¥–µ–Ω–Ω–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä—ñ–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—å:", md.hbold(f"{nutritional_profile["calories"]:.2f}"))
    )


@router.message(CalcCaloriesSurvey.weight_target)
async def calc_calories_survey_unknown_weight_target_handler(message: Message) -> None:
    await message.answer("‚ö†Ô∏è –û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –º–µ—Ç—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")
