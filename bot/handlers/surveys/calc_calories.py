from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from aiogram.utils import markdown as md

from bot.core.nutrition_calculator import calc_nutritional_profile
from bot.keyboards.biological_gender import (
    BIOLOGICAL_GENDER_TO_DATA,
    BIOLOGICAL_GENDER_TO_TEXT,
    biological_gender_keyboard,
)
from bot.keyboards.root import RootKeyboardText
from bot.keyboards.weight_target import WEIGHT_TARGET_TO_DATA, WEIGHT_TARGET_TO_TEXT, weight_target_keyboard
from bot.utils.dict_utils import get_key_by_value
from bot.utils.format_utils import format_age, format_number
from bot.utils.message_utils import build_detailed_message
from bot.utils.string_utils import get_tail

router = Router(name=__name__)


class CalcCaloriesSurvey(StatesGroup):
    biological_gender = State()
    age = State()
    height = State()
    weight = State()
    fat_pct = State()
    amr = State()
    weight_target = State()


async def add_messages_to_delete(*, state: FSMContext, message_ids: list[int]) -> None:
    data = await state.get_data()
    messages_to_delete = data.get("messages_to_delete", [])
    await state.update_data(messages_to_delete=[*messages_to_delete, *message_ids])


async def clear_messages(*, bot: Bot, chat_id: int | str, state: FSMContext) -> None:
    data = await state.get_data()
    messages_to_delete = data.get("messages_to_delete", [])
    if messages_to_delete:
        await bot.delete_messages(chat_id=chat_id, message_ids=messages_to_delete)
        await state.update_data(messages_to_delete=[])


@router.message(F.text == RootKeyboardText.CALC_CALORIES)
async def calc_calories_button_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(CalcCaloriesSurvey.biological_gender)
    sent_message = await message.answer(
        "üöª –û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –±—ñ–æ–ª–æ–≥—ñ—á–Ω—É —Å—Ç–∞—Ç—å, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É.", reply_markup=biological_gender_keyboard()
    )
    await add_messages_to_delete(state=state, message_ids=[message.message_id, sent_message.message_id])


@router.callback_query(CalcCaloriesSurvey.biological_gender, F.data.in_(BIOLOGICAL_GENDER_TO_DATA.values()))
async def calc_calories_survey_biological_gender_handler(callback_query: CallbackQuery, state: FSMContext) -> None:
    biological_gender = get_key_by_value(BIOLOGICAL_GENDER_TO_DATA, callback_query.data)
    await state.update_data(biological_gender=biological_gender)
    await state.set_state(CalcCaloriesSurvey.age)

    await callback_query.answer()
    icon, output = BIOLOGICAL_GENDER_TO_TEXT[biological_gender].split(maxsplit=1)
    await callback_query.message.edit_text(f"{icon} –í–∞—à–∞ –±—ñ–æ–ª–æ–≥—ñ—á–Ω–∞ —Å—Ç–∞—Ç—å: {md.hbold(output)}")
    sent_message = await callback_query.message.answer("üìÖ –í–∫–∞–∂—ñ—Ç—å –≤–∞—à –≤—ñ–∫:")
    await add_messages_to_delete(state=state, message_ids=[sent_message.message_id])


@router.message(CalcCaloriesSurvey.biological_gender)
async def calc_calories_survey_unknown_biological_gender_handler(message: Message, state: FSMContext) -> None:
    sent_message = await message.answer("‚ö†Ô∏è –û–±–µ—Ä—ñ—Ç—å –±—ñ–æ–ª–æ–≥—ñ—á–Ω—É —Å—Ç–∞—Ç—å, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")
    await add_messages_to_delete(state=state, message_ids=[message.message_id, sent_message.message_id])


@router.message(CalcCaloriesSurvey.age, F.text.regexp(r"^\d+$"))
async def calc_calories_survey_age_handler(message: Message, state: FSMContext) -> None:
    age = int(message.text)
    await state.update_data(age=age)
    await state.set_state(CalcCaloriesSurvey.height)

    sent_message = await message.answer("üìè –í–∫–∞–∂—ñ—Ç—å –≤–∞—à –∑—Ä—ñ—Å—Ç (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):")
    await add_messages_to_delete(state=state, message_ids=[message.message_id, sent_message.message_id])


@router.message(CalcCaloriesSurvey.age, ~F.text.regexp(r"^\d+$"))
async def calc_calories_survey_invalid_age_handler(message: Message, state: FSMContext) -> None:
    sent_message = await message.answer("‚ö†Ô∏è –í—ñ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —â–µ —Ä–∞–∑:")
    await add_messages_to_delete(state=state, message_ids=[message.message_id, sent_message.message_id])


@router.message(CalcCaloriesSurvey.height, F.text.regexp(r"^\d+(\.\d+)?$"))
async def calc_calories_survey_height_handler(message: Message, state: FSMContext) -> None:
    height = float(message.text)
    await state.update_data(height=height)
    await state.set_state(CalcCaloriesSurvey.weight)

    sent_message = await message.answer("‚öñÔ∏è –í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É (–≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö):")
    await add_messages_to_delete(state=state, message_ids=[message.message_id, sent_message.message_id])


@router.message(CalcCaloriesSurvey.height, ~F.text.regexp(r"^\d+(\.\d+)?$"))
async def calc_calories_survey_invalid_height_handler(message: Message, state: FSMContext) -> None:
    sent_message = await message.answer("‚ö†Ô∏è –ó—Ä—ñ—Å—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —â–µ —Ä–∞–∑:")
    await add_messages_to_delete(state=state, message_ids=[message.message_id, sent_message.message_id])


@router.message(CalcCaloriesSurvey.weight, F.text.regexp(r"^\d+(\.\d+)?$"))
async def calc_calories_survey_weight_handler(message: Message, state: FSMContext) -> None:
    weight = float(message.text)
    await state.update_data(weight=weight)
    await state.set_state(CalcCaloriesSurvey.fat_pct)

    sent_message = await message.answer("üìä –í–∫–∞–∂—ñ—Ç—å –≤–∞—à –≤—ñ–¥—Å–æ—Ç–æ–∫ –∂–∏—Ä—É:")
    await add_messages_to_delete(state=state, message_ids=[message.message_id, sent_message.message_id])


@router.message(CalcCaloriesSurvey.weight, ~F.text.regexp(r"^\d+(\.\d+)?$"))
async def calc_calories_survey_invalid_weight_handler(message: Message, state: FSMContext) -> None:
    sent_message = await message.answer("‚ö†Ô∏è –í–∞–≥–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å —ó—ó —â–µ —Ä–∞–∑:")
    await add_messages_to_delete(state=state, message_ids=[message.message_id, sent_message.message_id])


@router.message(CalcCaloriesSurvey.fat_pct, F.text.regexp(r"^\d+$"))
async def calc_calories_survey_fat_pct_handler(message: Message, state: FSMContext) -> None:
    fat_pct = int(message.text)
    await state.update_data(fat_pct=fat_pct)
    await state.set_state(CalcCaloriesSurvey.amr)

    sent_message = await message.answer("üèÉ –í–∫–∞–∂—ñ—Ç—å –≤–∞—à –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:")
    await add_messages_to_delete(state=state, message_ids=[message.message_id, sent_message.message_id])


@router.message(CalcCaloriesSurvey.fat_pct, ~F.text.regexp(r"^\d+$"))
async def calc_calories_survey_invalid_fat_pct_handler(message: Message, state: FSMContext) -> None:
    sent_message = await message.answer("‚ö†Ô∏è –í—ñ–¥—Å–æ—Ç–æ–∫ –∂–∏—Ä—É –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —â–µ —Ä–∞–∑:")
    await add_messages_to_delete(state=state, message_ids=[message.message_id, sent_message.message_id])


@router.message(CalcCaloriesSurvey.amr, F.text.regexp(r"^\d+(\.\d+)?$"))
async def calc_calories_survey_amr_handler(message: Message, state: FSMContext) -> None:
    await add_messages_to_delete(state=state, message_ids=[message.message_id])
    await clear_messages(bot=message.bot, chat_id=message.chat.id, state=state)

    amr = float(message.text)
    await state.update_data(amr=amr)
    data = await state.get_data()
    await state.set_state(CalcCaloriesSurvey.weight_target)

    await message.answer(
        build_detailed_message(
            title="üìã –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ",
            details=[
                ("–ë—ñ–æ–ª–æ–≥—ñ—á–Ω–∞ —Å—Ç–∞—Ç—å", get_tail(BIOLOGICAL_GENDER_TO_TEXT[data["biological_gender"]])),
                ("–í—ñ–∫", format_age(data["age"])),
                ("–†—ñ—Å—Ç", format_number(data["height"], "—Å–º")),
                ("–í–∞–≥–∞", format_number(data["weight"], "–∫–≥")),
                ("–í—ñ–¥—Å–æ—Ç–æ–∫ –∂–∏—Ä—É", format_number(data["fat_pct"], "%", sep="")),
                ("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", format_number(data["amr"])),
            ],
            footer="üéØ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—Å—ñ –¥–∞–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ, —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –º–µ—Ç—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É.",
        ),
        reply_markup=weight_target_keyboard(),
    )


@router.message(CalcCaloriesSurvey.amr, ~F.text.regexp(r"^\d+(\.\d+)?$"))
async def calc_calories_survey_invalid_amr_handler(message: Message, state: FSMContext) -> None:
    sent_message = await message.answer("‚ö†Ô∏è –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —â–µ —Ä–∞–∑:")
    await add_messages_to_delete(state=state, message_ids=[message.message_id, sent_message.message_id])


@router.callback_query(CalcCaloriesSurvey.weight_target, F.data.in_(WEIGHT_TARGET_TO_DATA.values()))
async def calc_calories_survey_weight_target_handler(callback_query: CallbackQuery, state: FSMContext) -> None:
    await clear_messages(bot=callback_query.bot, chat_id=callback_query.message.chat.id, state=state)

    weight_target = get_key_by_value(WEIGHT_TARGET_TO_DATA, callback_query.data)
    await state.update_data(weight_target=weight_target)
    data = await state.get_data()
    await state.clear()

    await callback_query.answer()
    await callback_query.message.edit_text(
        build_detailed_message(
            title="üìã –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ",
            details=[
                ("–ë—ñ–æ–ª–æ–≥—ñ—á–Ω–∞ —Å—Ç–∞—Ç—å", get_tail(BIOLOGICAL_GENDER_TO_TEXT[data["biological_gender"]])),
                ("–í—ñ–∫", format_age(data["age"])),
                ("–†—ñ—Å—Ç", format_number(data["height"], "—Å–º")),
                ("–í–∞–≥–∞", format_number(data["weight"], "–∫–≥")),
                ("–í—ñ–¥—Å–æ—Ç–æ–∫ –∂–∏—Ä—É", format_number(data["fat_pct"], "%", sep="")),
                ("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", format_number(data["amr"])),
            ],
            footer=(
                "üéØ –ù–∏–∂—á–µ –≤–∏ –±–∞—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –ø–æ–∂–∏–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ —â–æ–± " +
                md.hbold(get_tail(WEIGHT_TARGET_TO_TEXT[data["weight_target"]]).upper()) +
                ", —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö."
            ),
        )
    )

    nutritional_profile = calc_nutritional_profile(
        gender=data["biological_gender"],
        age=data["age"],
        height=data["height"],
        weight=data["weight"],
        fat_pct=data["fat_pct"],
        amr=data["amr"],
        target=data["weight_target"],
    )
    await callback_query.message.answer(
        build_detailed_message(
            title="üìä –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –ø–æ–∂–∏–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏",
            details=[
                ("–ö–∞–ª–æ—Ä—ñ—ó", format_number(nutritional_profile["calories"], "–∫–∫–∞–ª")),
                ("–ë—ñ–ª–∫–∏", format_number(nutritional_profile["proteins"], "–≥")),
                ("–ñ–∏—Ä–∏", format_number(nutritional_profile["fats"], "–≥")),
                ("–í—É–≥–ª–µ–≤–æ–¥–∏", format_number(nutritional_profile["carbohydrates"], "–≥")),
                ("–í–æ–¥–∞", format_number(nutritional_profile["water"], "–ª")),
                ("–ö–ª—ñ—Ç–∫–æ–≤–∏–Ω–∞", format_number(nutritional_profile["fiber"], "–≥")),
                ("–°—ñ–ª—å", format_number(nutritional_profile["salt"], "–≥")),
                ("–ù–æ—Ä–º–∞ –∫–æ—Ñ–µ—ó–Ω—É", format_number(nutritional_profile["caffeine_norm"], "–º–≥")),
                ("–ú–∞–∫—Å. –¥–æ–∑–∞ –∫–æ—Ñ–µ—ó–Ω—É", format_number(nutritional_profile["caffeine_max"], "–º–≥")),
            ],
            footer=(
                md.hbold("‚ö†Ô∏è –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É: ") +
                "—Ü—ñ –¥–∞–Ω—ñ –Ω–µ —î –¥–æ—Å—Ç–æ–≤—ñ—Ä–Ω–æ —Ç–æ—á–Ω–∏–º–∏, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –∑–∞–ª–µ–∂–∞—Ç—å –≤—ñ–¥ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç–µ–π –≤–∞—à–æ–≥–æ " +
                "–æ—Ä–≥–∞–Ω—ñ–∑–º—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —ó—Ö —è–∫ –≤—ñ–¥–ø—Ä–∞–≤–Ω—É —Ç–æ—á–∫—É —Ç–∞ –∫–æ—Ä–∏–≥—É–π—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤."
            )
        )
    )
    # TODO: add a button to round values & a button to show detailed info (lbm, bmr, tef...).


@router.message(CalcCaloriesSurvey.weight_target)
async def calc_calories_survey_unknown_weight_target_handler(message: Message, state: FSMContext) -> None:
    sent_message = await message.answer("‚ö†Ô∏è –û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –º–µ—Ç—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")
    await add_messages_to_delete(state=state, message_ids=[message.message_id, sent_message.message_id])
